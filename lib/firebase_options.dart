// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:nylo_framework/nylo_framework.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: getEnv("WEB_API_KEY"),
    appId: getEnv("WEB_APP_ID"),
    messagingSenderId: getEnv("WEB_MESSAGING_SENDER_ID"),
    projectId: getEnv("WEB_PROJECT_ID"),
    storageBucket: getEnv("WEB_AUTH_DOAMIN"),
    authDomain: getEnv("WEB_STORAGE_BUCKET"),
    measurementId: getEnv("WEB_MEASUREMENT_ID"),
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: getEnv("ANDROID_API_KEY"),
    appId: getEnv("ANDROID_APP_ID"),
    messagingSenderId: getEnv("ANDROID_MESSAGING_SENDER_ID"),
    projectId: getEnv("ANDROID_PROJECT_ID"),
    storageBucket: getEnv("ANDROID_STORAGE_BUCKET"),
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: getEnv("IOS_API_KEY"),
    appId: getEnv("IOS_APP_ID"),
    messagingSenderId: getEnv("IOS_MESSAGING_SENDER_ID"),
    projectId: getEnv("IOS_PROJECT_ID"),
    storageBucket: getEnv("IOS_STORAGE_BUCKET"),
    iosClientId: getEnv("IOS_CLIENT_ID"),
    iosBundleId: getEnv("IOS_BUNDLE_ID"),
  );
}
